/* Conceptual dependencies between KORE modules.
To build the PDF: 

1. install graphviz
2. dot -Tpdf -odependencies.pdf dependencies.gv

*/
strict digraph Dependencies {

subgraph cluster_legend {
 label="Legend"
 fontsize=16;
 color=blue;
 mindist=0;
 ranksep=0;
 nodesep=0;

 node[shape=box,margin="0,0",width=1, height=0.5];
 edge [style=invis];

 subgraph NodeKeys {
   node [style=filled, label=""];
   TodoKey [fillcolor="#f2003c"];
   StartedKey [fillcolor="#f28800"];
   PartialKey [fillcolor="#efcc00"];
   AlmostKey [fillcolor="#b1d700"];
   DoneKey [fillcolor="#00A877"];
 }
 subgraph LineKeys {
   node [shape=plaintext, fontsize=16];
   DependenciesKey [style=invis,label="", width=0];
   ReasonsKey [style=invis,label="", width=0];
 }
 subgraph Values {
   node [width=2.1];
   node [shape=plaintext];
   Todo [label="Todo\l"];
   Started[label="Started\l"];
   Partial[label="Partial\l"];
   Almost[label="Almost\l"];
   Done [label="Done\l"];
   Dependencies[label="Direct dependencies\l"];
   Reasons[label="Reasons for not being done\l"];
 }
 Legend[style=invis, label="", fontsize=0, height=0, width=0, margin=0];
 Legend -> TodoKey;
 Legend -> Todo;
 TodoKey -> StartedKey;
 Todo -> Started
 StartedKey -> PartialKey;
 Started -> Partial;
 PartialKey -> AlmostKey;
 Partial -> Almost;
 AlmostKey -> DoneKey;
 Almost -> Done;
 DoneKey -> DependenciesKey;
 Done -> Dependencies;
 DependenciesKey -> ReasonsKey;
 Dependencies -> Reasons;

 edge [constraint=false];
 TodoKey -> Todo;
 StartedKey -> Started;
 PartialKey -> Partial;
 AlmostKey -> Almost;
 DoneKey -> Done;
 DependenciesKey -> Dependencies [style=solid];
 ReasonsKey -> Reasons [style=dashed];
}

subgraph todo {
    node [style=filled, fillcolor="#f2003c"];

    allPath [label="All Path PV"];
    functionDomains [label="Function Domains"];
    lightVer [label="Lightweight Verification Tool"];
    moduloAxiomsRew [label="Rewriting Modulo Axioms"];
    mc [label="Model Checking"];
    sbc [label="Semantics-Based Compilation"];
    smc [label="Symbolic Model Checking"];
}

subgraph started {
    node [style=filled, fillcolor="#f28800"];

    lazyFunctions [label="Lazy Function Evaluation"];
    proofs [label="Proof Generation"];
}

subgraph partial {
    node [style=filled, fillcolor="#efcc00"];

    builtins [label="Builtins Evaluation/Simplification"];
    search [label="State-Space Exploration"];
    verification [label="Program Verification"];
}

subgraph almost {
    node [style=filled, fillcolor="#b1d700"];

    concrete [label="Concrete Execution"];
    equality [label="Equality Application"];
    functionSimpl [label="Function Simplification"];
    matching [label="Pattern Matching"];
    onePath [label="One Path PV"];
    smt [label="SMT integration"];
    symbolic [label="Symbolic Execution"];
}

subgraph done {
    node [style=filled, fillcolor="#00A877"];

    axiomApp [label="Axiom Application"];
    functionEval [label="Function Evaluation"];
    moduloAxioms [label="Unification/Matching Modulo Axioms"];
    ruleApp [label="Rewriting Application"];
    strategies [label="Exploration Strategy"];
    unification [label=Unification];
}

allPath -> moduloAxiomsRew;
allPath -> strategies;
allPath ->symbolic;
concrete -> functionEval;
concrete -> strategies;
equality -> axiomApp;
equality -> matching;
functionEval -> builtins;
functionEval -> equality;
functionEval -> functionDomains;
functionSimpl -> functionEval;
functionSimpl -> lazyFunctions;
moduloAxiomsRew -> equality;
lazyFunctions -> functionEval;
lightVer -> concrete;
lightVer -> mc;
lightVer -> search;
lightVer -> smc;
lightVer -> symbolic;
matching -> moduloAxioms;
mc -> search;
mc -> concrete;
onePath -> strategies;
onePath ->symbolic;
ruleApp -> axiomApp;
ruleApp -> unification;
sbc -> symbolic;
search -> moduloAxiomsRew;
search -> strategies;
smc -> search;
smc -> symbolic;
strategies -> ruleApp;
symbolic -> functionSimpl;
symbolic -> ruleApp;
symbolic -> smt;
unification -> moduloAxioms;
verification -> allPath
verification -> onePath;

subgraph completenessDependencies {
    edge [style=dashed];

    concrete -> builtins;
    functionSimpl -> builtins;
    functionSimpl -> matching;
    symbolic -> functionDomains;
}
}
