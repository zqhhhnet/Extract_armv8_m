// Test `makeArray`
assert makeArray(5, 0) ==K array(.Map, 5, 0)

// Test `_[_]` and `_[_<-_]`
assert makeArray(5, 0)[0] ==K 0
assert makeArray(5, 1)[7] ==K 1 // Is this what we want?
assert makeArray(5, 0)[0 <- 5][0] ==K 5
assert makeArray(5, 0)[0 <- 5][0 <- undef][0] ==K 0
assert makeArray(5, 0)[7 <- 3][2 <- 1][1 <- 7] ==K array(1 |-> 7 2 |-> 1, 5, 0)
assert makeArray(5, 0)[2 <- 1][2 <- 7] ==K array(2 |-> 7, 5, 0)

// Test `updateArray`
assert updateArray(makeArray(5, 0), 0, ListItem(1) ListItem(2) ListItem(3)) ==K array(0 |-> 1 1 |-> 2 2 |-> 3  , 5, 0)
assert updateArray(makeArray(5, 0)[3 <- 20][2 <- 10], 2, ListItem(1) ListItem(2)) ==K array(2 |-> 1 3 |-> 2, 5, 0)
assert updateArray(makeArray(5, 0)[3 <- 20][2 <- 10], 4, ListItem(1) ListItem(2) ListItem(3)) ==K array(2 |-> 10 3 |-> 20 4 |-> 1, 5, 0)

// Test `in_keys(_)`
assert notBool 0 in_keys(makeArray(5, 0))
assert 0 in_keys (makeArray(5, 0)[0 <- 5])
assert notBool -1 in_keys(makeArray(5, 0)[-1 <- 5])
