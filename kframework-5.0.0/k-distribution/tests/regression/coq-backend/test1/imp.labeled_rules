module IMP-SYNTAX
imports AUTO-INCLUDED-MODULE-SYNTAX
rule `'_&&_`(GeneratedAnonVar20,GeneratedAnonVar1) => GeneratedAnonVar20 ~> #freezer(`'_&&_`(HOLE,GeneratedAnonVar1)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar20),#token{"#Bool","true"})
rule GeneratedAnonVar20 ~> #freezer(`'_&&_`(HOLE,GeneratedAnonVar1)) => `'_&&_`(GeneratedAnonVar20,GeneratedAnonVar1) when `isKResult`(GeneratedAnonVar20)
rule `'_+_`(GeneratedAnonVar21,GeneratedAnonVar3) => GeneratedAnonVar21 ~> #freezer(`'_+_`(HOLE,GeneratedAnonVar3)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar21),#token{"#Bool","true"})
rule GeneratedAnonVar21 ~> #freezer(`'_+_`(HOLE,GeneratedAnonVar3)) => `'_+_`(GeneratedAnonVar21,GeneratedAnonVar3) when `isKResult`(GeneratedAnonVar21)
rule `'_+_`(GeneratedAnonVar4,GeneratedAnonVar22) => GeneratedAnonVar22 ~> #freezer(`'_+_`(GeneratedAnonVar4,HOLE)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar22),#token{"#Bool","true"})
rule GeneratedAnonVar22 ~> #freezer(`'_+_`(GeneratedAnonVar4,HOLE)) => `'_+_`(GeneratedAnonVar4,GeneratedAnonVar22) when `isKResult`(GeneratedAnonVar22)
rule `'!_`(GeneratedAnonVar23) => GeneratedAnonVar23 ~> #freezer(`'!_`(HOLE)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar23),#token{"#Bool","true"})
rule GeneratedAnonVar23 ~> #freezer(`'!_`(HOLE)) => `'!_`(GeneratedAnonVar23) when `isKResult`(GeneratedAnonVar23)
rule `'_=_;`(GeneratedAnonVar7,GeneratedAnonVar24) => GeneratedAnonVar24 ~> #freezer(`'_=_;`(GeneratedAnonVar7,HOLE)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar24),#token{"#Bool","true"})
rule GeneratedAnonVar24 ~> #freezer(`'_=_;`(GeneratedAnonVar7,HOLE)) => `'_=_;`(GeneratedAnonVar7,GeneratedAnonVar24) when `isKResult`(GeneratedAnonVar24)
rule `'_<=_`(GeneratedAnonVar25,GeneratedAnonVar10) => GeneratedAnonVar25 ~> #freezer(`'_<=_`(HOLE,GeneratedAnonVar10)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar25),#token{"#Bool","true"})
rule GeneratedAnonVar25 ~> #freezer(`'_<=_`(HOLE,GeneratedAnonVar10)) => `'_<=_`(GeneratedAnonVar25,GeneratedAnonVar10) when `isKResult`(GeneratedAnonVar25)
rule `'_<=_`(GeneratedAnonVar11,GeneratedAnonVar26) => GeneratedAnonVar26 ~> #freezer(`'_<=_`(GeneratedAnonVar11,HOLE)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar26),#token{"#Bool","true"})
rule GeneratedAnonVar26 ~> #freezer(`'_<=_`(GeneratedAnonVar11,HOLE)) => `'_<=_`(GeneratedAnonVar11,GeneratedAnonVar26) when `isKResult`(GeneratedAnonVar26)
rule `'if(_)_else_`(GeneratedAnonVar27,GeneratedAnonVar14,GeneratedAnonVar15) => GeneratedAnonVar27 ~> #freezer(`'if(_)_else_`(HOLE,GeneratedAnonVar14,GeneratedAnonVar15)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar27),#token{"#Bool","true"})
rule GeneratedAnonVar27 ~> #freezer(`'if(_)_else_`(HOLE,GeneratedAnonVar14,GeneratedAnonVar15)) => `'if(_)_else_`(GeneratedAnonVar27,GeneratedAnonVar14,GeneratedAnonVar15) when `isKResult`(GeneratedAnonVar27)
rule `'_/_`(GeneratedAnonVar28,GeneratedAnonVar17) => GeneratedAnonVar28 ~> #freezer(`'_/_`(HOLE,GeneratedAnonVar17)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar28),#token{"#Bool","true"})
rule GeneratedAnonVar28 ~> #freezer(`'_/_`(HOLE,GeneratedAnonVar17)) => `'_/_`(GeneratedAnonVar28,GeneratedAnonVar17) when `isKResult`(GeneratedAnonVar28)
rule `'_/_`(GeneratedAnonVar18,GeneratedAnonVar29) => GeneratedAnonVar29 ~> #freezer(`'_/_`(GeneratedAnonVar18,HOLE)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar29),#token{"#Bool","true"})
rule GeneratedAnonVar29 ~> #freezer(`'_/_`(GeneratedAnonVar18,HOLE)) => `'_/_`(GeneratedAnonVar18,GeneratedAnonVar29) when `isKResult`(GeneratedAnonVar29)
endmodule
module IMP
imports AUTO-INCLUDED-MODULE
imports IMP-SYNTAX
configuration <T><k>$PGM:Pgm</k><state>`'.Map`()</state></T>
rule <k>X:Id => I...</k><state>...`'_|->_`(X, I)...</state>
rule `'_/_`(I1, I2) => `'_/Int_`(I1, I2) when `'_=/=Int_`(I2, #token{"#Int","0"})
rule `'_+_`(I1, I2) => `'_+Int_`(I1, I2)
rule `'_<=_`(I1, I2) => `'_<=Int_`(I1, I2)
rule `'!_`(T) => `'notBool_`(T)
rule `'_&&_`(#token{"#Bool","true"}, B) => B
rule `'_&&_`(#token{"#Bool","false"}, _) => #token{"#Bool","false"}
rule `'{}`() => .K
rule `'{_}`(S) => S
rule <k>`'_=_;`(X, I:Int) => .K...</k><state>...`'_|->_`(X, _ => I)...</state>
rule `'__`(S1:Stmt, S2:Stmt) => S1 ~> S2
rule `'if(_)_else_`(#token{"#Bool","true"}, S, _) => S
rule `'if(_)_else_`(#token{"#Bool","false"}, _, S) => S
rule `'while(_)_`(B, S) => `'if(_)_else_`(B, `'{_}`(`'__`(S, `'while(_)_`(B, S))), `'{}`())
rule <k>`'int_;_`(`_,Ids_`(X, Xs) => Xs, _)</k><state>`'_Map_`(Rho:Map, `'.Map`() => `'_|->_`(X, #token{"#Int","0"}))</state> when `'notBool_`(`'_in_`(X, `'keys`(Rho)))
rule `'int_;_`(`.Ids`(), S) => S
rule `'_&&_`(GeneratedAnonVar20,GeneratedAnonVar1) => GeneratedAnonVar20 ~> #freezer(`'_&&_`(HOLE,GeneratedAnonVar1)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar20),#token{"#Bool","true"})
rule GeneratedAnonVar20 ~> #freezer(`'_&&_`(HOLE,GeneratedAnonVar1)) => `'_&&_`(GeneratedAnonVar20,GeneratedAnonVar1) when `isKResult`(GeneratedAnonVar20)
rule `'_+_`(GeneratedAnonVar21,GeneratedAnonVar3) => GeneratedAnonVar21 ~> #freezer(`'_+_`(HOLE,GeneratedAnonVar3)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar21),#token{"#Bool","true"})
rule GeneratedAnonVar21 ~> #freezer(`'_+_`(HOLE,GeneratedAnonVar3)) => `'_+_`(GeneratedAnonVar21,GeneratedAnonVar3) when `isKResult`(GeneratedAnonVar21)
rule `'_+_`(GeneratedAnonVar4,GeneratedAnonVar22) => GeneratedAnonVar22 ~> #freezer(`'_+_`(GeneratedAnonVar4,HOLE)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar22),#token{"#Bool","true"})
rule GeneratedAnonVar22 ~> #freezer(`'_+_`(GeneratedAnonVar4,HOLE)) => `'_+_`(GeneratedAnonVar4,GeneratedAnonVar22) when `isKResult`(GeneratedAnonVar22)
rule `'!_`(GeneratedAnonVar23) => GeneratedAnonVar23 ~> #freezer(`'!_`(HOLE)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar23),#token{"#Bool","true"})
rule GeneratedAnonVar23 ~> #freezer(`'!_`(HOLE)) => `'!_`(GeneratedAnonVar23) when `isKResult`(GeneratedAnonVar23)
rule `'_=_;`(GeneratedAnonVar7,GeneratedAnonVar24) => GeneratedAnonVar24 ~> #freezer(`'_=_;`(GeneratedAnonVar7,HOLE)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar24),#token{"#Bool","true"})
rule GeneratedAnonVar24 ~> #freezer(`'_=_;`(GeneratedAnonVar7,HOLE)) => `'_=_;`(GeneratedAnonVar7,GeneratedAnonVar24) when `isKResult`(GeneratedAnonVar24)
rule `'_<=_`(GeneratedAnonVar25,GeneratedAnonVar10) => GeneratedAnonVar25 ~> #freezer(`'_<=_`(HOLE,GeneratedAnonVar10)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar25),#token{"#Bool","true"})
rule GeneratedAnonVar25 ~> #freezer(`'_<=_`(HOLE,GeneratedAnonVar10)) => `'_<=_`(GeneratedAnonVar25,GeneratedAnonVar10) when `isKResult`(GeneratedAnonVar25)
rule `'_<=_`(GeneratedAnonVar11,GeneratedAnonVar26) => GeneratedAnonVar26 ~> #freezer(`'_<=_`(GeneratedAnonVar11,HOLE)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar26),#token{"#Bool","true"})
rule GeneratedAnonVar26 ~> #freezer(`'_<=_`(GeneratedAnonVar11,HOLE)) => `'_<=_`(GeneratedAnonVar11,GeneratedAnonVar26) when `isKResult`(GeneratedAnonVar26)
rule `'if(_)_else_`(GeneratedAnonVar27,GeneratedAnonVar14,GeneratedAnonVar15) => GeneratedAnonVar27 ~> #freezer(`'if(_)_else_`(HOLE,GeneratedAnonVar14,GeneratedAnonVar15)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar27),#token{"#Bool","true"})
rule GeneratedAnonVar27 ~> #freezer(`'if(_)_else_`(HOLE,GeneratedAnonVar14,GeneratedAnonVar15)) => `'if(_)_else_`(GeneratedAnonVar27,GeneratedAnonVar14,GeneratedAnonVar15) when `isKResult`(GeneratedAnonVar27)
rule `'_/_`(GeneratedAnonVar28,GeneratedAnonVar17) => GeneratedAnonVar28 ~> #freezer(`'_/_`(HOLE,GeneratedAnonVar17)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar28),#token{"#Bool","true"})
rule GeneratedAnonVar28 ~> #freezer(`'_/_`(HOLE,GeneratedAnonVar17)) => `'_/_`(GeneratedAnonVar28,GeneratedAnonVar17) when `isKResult`(GeneratedAnonVar28)
rule `'_/_`(GeneratedAnonVar18,GeneratedAnonVar29) => GeneratedAnonVar29 ~> #freezer(`'_/_`(GeneratedAnonVar18,HOLE)) when `'_=/=K_`(`isKResult`(GeneratedAnonVar29),#token{"#Bool","true"})
rule GeneratedAnonVar29 ~> #freezer(`'_/_`(GeneratedAnonVar18,HOLE)) => `'_/_`(GeneratedAnonVar18,GeneratedAnonVar29) when `isKResult`(GeneratedAnonVar29)
endmodule
