49588c
           •      2 n - 1 if x > 2n – 1
.
49456c
            •      2(n-1) – 1 if x > 2(n–1) – 1.
.
49454c
            •      x if -2(n–1) <= x <= 2(n–1) – 1
.
49452c
            •      -2(n–1) if x < –2(n–1)
.
49440c
        Returns 0 if x lies inside the range of an n-bit signed integer (that is, if -2(n–1) ≤ x ≤ 2(n–1) – 1), and 1
.
49435c
         Represent an integer in the range −2N−1 to +2N−1- 1, using two's complement format.
.
49388c
         wrap around from +231-1 to –231 or vice versa.
.
49183c
MemoryAccess(B bit, E bit)
.
49181c
            The byte order of the access is defined by MemoryAccess(B bit, E bit).
.
48832c
          numbered from 0 to (set associativity)-1.
.
48232c
   7      RW              0          Vector Catch Enable - FIQ                         most recent      most recent
.
48229c
   6      RW              0          Vector Catch Enable - IRQ                         most recent      most recent
.
48225c
   4      RW              0          Vector Catch Enable - Data Abort                  0x00000010       0xFFFF0010
.
48223c
   3      RW              0          Vector Catch Enable - Prefetch Abort              0x0000000C       0xFFFF000C
.
48221c
   2      RW              0          Vector Catch Enable - SWI                         0x00000008       0xFFFF0008
.
48219c
   1      RW              0          Vector Catch Enable - Undefined instruction       0x00000004       0xFFFF0004
.
48217c
   0      RW              0          Vector Catch Enable - Reset                       0x00000000       0xFFFF0000
.
44879c
           MemoryAccess(B bit, E bit)
.
44783c
           MemoryAccess(B bit, E bit)
.
44675c
           MemoryAccess(B bit, E bit)
.
44569c
           MemoryAccess(B bit, E bit)
.
44476c
           MemoryAccess(B bit, E bit)
.
42313c
           MemoryAccess(B bit, E bit)
.
42234c
         MemoryAccess(B bit, E bit)
.
42130c
         MemoryAccess(B bit, E bit)
.
42033c
         MemoryAccess(B bit, E bit)
.
41942c
           MemoryAccess(B bit, E bit)
.
36384c
           31 30                                                               W W-1                                   0
.
36367c
           31                       32-W 31–W                                                                          0
.
36127c
            31                                                                                     L    L-1                  0
.
32916c
          31                                                    14 - n    13 – n                     5 4     3 2 1 0
.
28039c
           if high_vectors_configured() then
.
28031c
           R14_svc   = address_of_next_instruction()
.
27727a

.
27714c
         MemoryAccess(B bit, E bit)
.
27638a

.
27625c
         MemoryAccess(B bit, E bit)
.
27560a

.
27553c
         MemoryAccess(B bit, E bit)
.
27490a

.
27483c
         MemoryAccess(B bit, E bit)
.
27406a

.
27393c
         MemoryAccess(B bit, E bit)
.
27317a

.
27304c
         MemoryAccess(B bit, E bit)
.
27236a

.
27223c
           MemoryAccess(B bit, E bit)
.
27120a

.
27114,27115c
                 if Shared(address) then /* from ARMv6 */
                     physical_address = TLB(address)
.
27112c
             if register_list[i] == 1 then
.
27106c
         MemoryAccess(B bit, E bit)
.
27028c
         CPSR[9] = E
.
27000c
           15     14     13     12     11     10     9      8      7      6      5 4            3         2           0
.
26812c
             15 14 13              12     11 10 9                  8    7      6      5            3   2            0
.
26799c
          31         28 27                 23 22 21 20 19              16 15            12 11            8 7 6        4   3             0
.
26756c
           15 14 13                12       11 10 9                8       7        6           5            3     2                 0
.
26701c
             15 14 13                12       11 10 9                8       7        6   5              3    2                0
.
26641,26644c
           if (CP15_reg1_Ubit == 1) then        /* ARMv6 */
               if Shared(address) then     /* from ARMv6 */
                   physical_address = TLB(address)
                   ClearExclusiveByAddress(physical_address, 4)

.
26628c
           MemoryAccess(B bit, E bit)
.
26514c
         assert end_address == address
.
26510c
             if v5_and_above() then
.
26497c
         MemoryAccess(B bit, E bit)
.
25667c
           MemoryAccess(B bit, E bit)
.
25530c
         MemoryAccess(B bit, E bit)
.
25445c
         MemoryAccess(B bit, E bit)
.
25250c
         MemoryAccess(B bit, E bit)
.
25168,25169c
         MemoryAccess(B bit, E bit)
         address = (PC AND 0xFFFFFFFC) + (immed_8 * 4)
.
25083c
         MemoryAccess(B bit, E bit)
.
25003c
         MemoryAccess(B bit, E bit)
.
24909d
24903a
         Rn = Rn + (Number_Of_Set_Bits_In(register_list) * 4)
.
24900c
         MemoryAccess(B bit, E bit)
.
24651c
           15    14    13      12    11     10      9      8      7      6      5      4      3      2         1    0
.
24291c
           LR = address_of_next_instruction() | 1
.
24149c
             LR = address_of_next_instruction() | 1
.
24147c
         else if H == 0b01 then
.
24145c
             LR = address_of_next_instruction() | 1
.
24143c
         else if H == 0b11 then
.
24140c
         if H == 0b10 then
.
24019c
               if high_vectors_configured() then
.
24010,24011c
           if not_overridden_by_debug_hardware()
               R14_abt   = address_of_current_instruction() + 4
.
23866c
                           The instruction can therefore specify a branch of -2048 to +2046 bytes, relative to the
.
23777c
                           The instruction can therefore specify a branch of -256 to +254 bytes, relative to the current
.
23652c
             else /* Rm[31] == 1 */
.
22764c
             1     0        0       1     L              Rd                         immed_8
.
22748c
             0       1     0       0      1          Rd                              immed_8
.
22583c
             1     0        1    0    reg         Rd                              immed_8
.
22546c
           0      0     1          op_3            Rd|Rn                          immed_8
.
21993c
             while (NotFinished(Coprocessor[cp_num]))
.
21940c
             while (NotFinished(Coprocessor[cp_num]))
.
21903c
A5.5.4   Load and Store Coprocessor - Immediate post indexed
.
21883c
             while (NotFinished(Coprocessor[cp_num]))
.
21846c
A5.5.3   Load and Store Coprocessor - Immediate pre indexed
.
21826c
             while (NotFinished(Coprocessor[cp_num]))
.
21751,21752d
21639c
No encoding here -- A5.4.6   Load and Store Multiple addressing modes (alternative names)
.
21589c
               cond       1 0 0 1 0 S W L                Rn                             register_list
.
21540c
                cond       1 0 0 0 0 S W L                Rn                             register_list
.
21490c
               cond       1 0 0 1 1 S W L                Rn                             register_list
.
21440c
                cond       1 0 0 0 1 S W L                Rn                             register_list
.
21398c
               cond       1 0 0 P U S W L                 Rn                             register_list
.
21393,21395c
A5.4.1   Encoding The following diagram shows the encoding for this addressing mode:
.
21307c
A5.3.7   Miscellaneous Loads and Stores - Register post indexed
.
21257c
                cond       0 0 0 0 U 1 0 L                Rn           Rd         immedH     1 S H 1          immedL
.
21254c
A5.3.6   Miscellaneous Loads and Stores - Immediate post indexed
.
21203c
A5.3.5   Miscellaneous Loads and Stores - Register pre indexed
.
21152c
                cond       0 0 0 1 U 1 1 L                Rn           Rd           immedH     1 S H 1        immedL
.
21149c
A5.3.4   Miscellaneous Loads and Stores - Immediate pre indexed
.
20985c
A5.3.1.2   Encoding Register offset/index
.
20981c
                cond       0 0 0 P U 1 W L               Rn           Rd        immedH      1 S H 1         immedL
.
20974,20978c
A5.3.1.1   Encoding Immediate offset/index
.
20836c
A5.2.10 Load and Store Word or Unsigned Byte - Scaled register post indexed
.
20778c
A5.2.9   Load and Store Word or Unsigned Byte - Register post indexed
.
20712c
A5.2.8   Load and Store Word or Unsigned Byte - Immediate post indexed
.
20604c
A5.2.7   Load and Store Word or Unsigned Byte - Scaled register pre indexed
.
20549c
A5.2.6   Load and Store Word or Unsigned Byte - Register pre indexed
.
20494c
A5.2.5   Load and Store Word or Unsigned Byte - Immediate pre indexed
.
20255c
A5.2.1.3   Encoding Scaled register offset/index
.
20248c
A5.2.1.2   Encoding Register offset/index
.
20237,20241c
A5.2.1.1   Encoding Immediate offset/index
.
20142c
A5.1.13 Data processing operands - Rotate right with extend
.
20092c
A5.1.12 Data processing operands - Rotate right by register
.
20074c
             shifter_operand = (C Flag Logical_Shift_Left 31) OR (Rm Logical_Shift_Right 1)
             shifter_carry_out = Rm[0]
.
20045c
A5.1.11 Data processing operands - Rotate right by immediate
.
19990c
A5.1.10 Data processing operands - Arithmetic shift right by register
.
19974c
             shifter_operand = Rm Arithmetic_Shift_Right shift_imm
.
19938c
A5.1.9   Data processing operands - Arithmetic shift right by immediate
.
19885c
A5.1.8   Data processing operands - Logical shift right by register
.
19837c
A5.1.7   Data processing operands - Logical shift right by immediate
.
19785c
A5.1.6   Data processing operands - Logical shift left by register
.
19734c
A5.1.5   Data processing operands - Logical shift left by immediate
.
19695c
A5.1.4   Data processing operands - Register
.
19625c
A5.1.3   Data processing operands - Immediate
.
19550c
No encoding here --  A5.1.2   The shifter operand
.
19511c
A5.1.1.3 Encoding Register shifts
.
19504c
A5.1.1.2 Encoding Immediate shifts
.
19493,19497c
A5.1.1.1   Encoding 32-bit immediate
.
18445c
                                             or UnsignedDoesSat(Rm[31:16], sat_imm) then
.
18420c
         2n - 1             if X > 2n – 1
.
18363c
                         operand = (Rm Arithmetic_Shift_Right shift_imm)[31:0]
.
18361c
                         operand = (Rm Arithmetic_Shift_Right 32)[31:0]
.
18337c
         2n - 1             if X > 2n – 1
.
18272c
                                      + ZeroExtend(diff3) + ZeroExtend(diff4)
.
18188c
                                      + ZeroExtend(diff3) + ZeroExtend(diff4)
.
18067c
         0 ≤ x ≤ 216 - 1. It exchanges the two halfwords of the second operand before it performs the arithmetic. It
.
18011c
           0 ≤ x ≤ 28 - 1. It has no effect on the GE flags.
.
17956c
         unsigned integer range 0 ≤ x ≤ 216 - 1. It has no effect on the GE flags.
.
17892c
         one 16-bit subtraction. It saturates the results to the 16-bit unsigned integer range 0 ≤ x ≤ 216 - 1. It
.
17837c
           0 ≤ x ≤ 28 - 1. It has no effect on the GE flags.
.
17782c
         16-bit unsigned integer range 0 ≤ x ≤ 216 - 1. It has no effect on the GE flags.
.
16304a
               address = Rn
.
16302c
           MemoryAccess(B bit, E bit)
.
16210,16218d
16200a
               address = Rn
.
16198c
           MemoryAccess(B bit, E bit)
.
16129c
               if high_vectors_configured() then
.
16121c
               R14_svc   = address_of_next_instruction()
.
15944c
         MemoryAccess(B bit, E bit)
.
15847c
         MemoryAccess(B bit, E bit)
.
15754c
         MemoryAccess(B bit, E bit)
.
15659c
               if (Rd is even) and (Rd is not R14) and
.
15656c
           MemoryAccess(B bit, E bit)
.
15398c
         MemoryAccess(B bit, E bit)
.
15305c
           MemoryAccess(B bit, E bit)
.
15201c
           MemoryAccess(B bit, E bit)
.
15086c
             while (NotFinished(Coprocessor[cp_num]))
.
15078c
         MemoryAccess(B bit, E bit)
.
15054c
                            determines the P, U, Rn, W and offset_8 bits of the instruction.
.
15021c
                cond       1 1 0 P U N W 0                 Rn            CRd        cp_num           offset_8
.
14777c
                                           or SignedDoesSat(Rm[31:16], sat_imm + 1) then
.
14752c
           2(n-1) – 1         if X > 2(n–1) – 1
.
14750c
           X                  if -2(n–1) <= X <= 2(n–1) – 1
.
14748c
           -2(n–1)            if X is < –2(n–1)
.
14696c
                       operand = (Rm Arithmetic_Shift_Right shift_imm)[31:0]
.
14694c
                       operand = (Rm Arithmetic_Shift_Right 32)[31:0]
.
14670c
           2(n-1) – 1         if X > 2(n–1) – 1
.
14668c
           X                  if -2(n–1) <= X <= 2(n–1) – 1
.
14666c
           -2(n–1)            if X is < –2(n–1)
.
14593a
         */
.
14592c
         .      Rn is the banked version of R13 belonging to the mode specified by the instruction, rather than being
.
14589c
         .      Number_Of_Set_Bits_in(register_list) evaluates to 2, rather than depending on bits[15:0] of the
.
14585a
         /*
.
14570c
         MemoryAccess(B bit, E bit)
.
13972c
                    Rd = ((Rn<<32) - value)[63:32]
.
12601c
         CPSR[9] = E
.
12575c
          1 1 1 1 0 0 0 1 0 0 0 0 0 0 0 1                               SBZ         E !SBZ 0 0 0 0                SBZ
.
12573c
          31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15                     10 9     8    7 6 5 4 3         0
.
12032c
           You can perform constant multiplication (of Rx) by 2n-1 (into Rd) with:
.
11920a
           */
.
11917a
           /*
.
11792c
          31           28   27 26 25 24 23 22 21 20 19            16 15         12 11         8 7 6 5 4   3         0
.
11738c
           31          28   27 26 25 24 23 22 21 20 19            16 15         12 11         8   7 6 5 4 3            0
.
11684c
          31           28   27 26 25 24 23 22 21 20 19            16 15         12 11         8 7 6 5 4   3         0
.
11667c
           performs the complex arithmetic operation Rd = (Ra - i * Rb).
.
11620c
          -215 ≤ x ≤ 215 – 1. It exchanges the two halfwords of the second operand before it performs the arithmetic.
.
11554c
          -27 ≤ x ≤ 27 – 1.
.
11500c
           -215 ≤ x ≤ 215 – 1.
.
11444c
         range -231 ≤ x ≤ 231 – 1.
.
11361c
         -231 ≤ x ≤ 231 – 1.
.
11276c
         -231 ≤ x ≤ 231 – 1.
.
11202c
         subtraction. It saturates the results to the 16-bit signed integer range -215 ≤ x ≤ 215 – 1. QADDSUBX exchanges
.
11137c
         -27 ≤ x ≤ 27 – 1.
.
11083c
           -215 ≤ x ≤ 215 – 1.
.
11002,11003c
           QADD (Saturating Add) performs integer addition. It saturates the result to the 32-bit signed integer range -231
           ≤ x ≤ 231 - 1.
.
10829c
           31          28 27 26 25 24 23 22 21 20 19            16 15          12 11               7 6 5 4 3            0
.
10750c
           31          28 27 26 25 24 23 22 21 20 19            16 15          12 11               7 6 5 4 3           0
.
10546c
                   C Flag = unaffected in v5_and_above(), UNPREDICTABLE in v4_and_earlier()
.
10383,10386c
             operand = Rm
.
10380c
         */
.
10360a
         /*
.
10322d
10320d
10309a
           However, if the only reason that an MSR instruction cannot change a field is that no bits are currently allocated
           to the field, then the field must be written, to ensure future compatibility.

           You can use the immediate form of MSR to set any of the fields of a PSR, but you must take care to use the
           read-modify-write technique described above. The immediate form of the instruction is equivalent to
           reading the PSR concerned, replacing all the bits in the fields concerned by the corresponding bits of the
           immediate constant and writing the result back to the PSR. The immediate form must therefore only be used
           when the intention is to modify all the bits in the specified fields and, in particular, must not be used if the
           specified fields include any as-yet-unallocated bits. Failure to observe this rule might result in code which
           has unanticipated side effects on future versions of the ARM architecture.

           As an exception to the above rule, it is legitimate to use the immediate form of the instruction to modify the
           flags byte, despite the fact that bits[26:25] of the PSRs have no allocated function at present. For example,
           you can use MSR to set all four flags (and clear the Q flag if the processor implements the Enhanced DSP
           extension):

               MSR     CPSR_f,#0xF0000000

           Any functionality allocated to bits[26:25] in a future version of the ARM architecture will be designed so
           that such code does not have unexpected side effects. Several bits must not be changed to reserved values
           or the results are UNPREDICTABLE. For example, an attempt to write a reserved value to the mode bits (4:0),
           or changing the J-bit (24).




A4-78                Copyright © 1996-1998, 2000, 2004, 2005 ARM Limited. All rights reserved.             ARM DDI 0100I
                                                                                                      ARM Instructions



         Notes
         The R bit      Bit[22] of the instruction is 0 if the CPSR is to be written and 1 if the SPSR is to be written.

         User mode CPSR
                        Any writes to privileged or execution state bits are ignored.

         User mode SPSR
                        Accessing the SPSR when in User mode is UNPREDICTABLE.

         System mode SPSR
                        Accessing the SPSR when in System mode is UNPREDICTABLE.

         Obsolete field specification
                        The CPSR, CPSR_flg, CPSR_ctl, CPSR_all, SPSR, SPSR_flg, SPSR_ctl and SPSR_all forms of PSR
                        field specification have been superseded by the csxf format shown on page A4-76.
                        CPSR, SPSR, CPSR_all and SPSR_all produce a field mask of 0b1001.
                        CPSR_flg and SPSR_flg produce a field mask of 0b1000.
                        CPSR_ctl and SPSR_ctl produce a field mask of 0b0001.

         The T bit or J bit
                        The MSR instruction must not be used to alter the T bit or the J bit in the CPSR. If such an
                        attempt is made, the results are UNPREDICTABLE.

         Addressing modes
                        The immediate and register forms are specified in precisely the same way as the immediate
                        and unshifted register forms of Addressing Mode 1 (see Addressing Mode 1 -
                        Data-processing operands on page A5-2). All other forms of Addressing Mode 1 yield
                        UNPREDICTABLE results.




ARM DDI 0100I     Copyright © 1996-1998, 2000, 2004, 2005 ARM Limited. All rights reserved.                      A4-79
ARM Instructions


A4.1.39 MSRreg
.
10308c
           For maximum efficiency, MSR instructions should only write to those fields that they can potentially change.
           For example, the last instruction in the above code can only change the CPSR control field, as all bits in the
           other fields are unchanged since they were read from the CPSR by the first instruction. So it writes to
           CPSR_c, not CPSR_fsxc or some other combination of fields.
.
10306a
           You must normally update the value of a PSR by moving the PSR to a general-purpose register (using the
           MRS instruction), modifying the relevant bits of the general-purpose register, and restoring the updated
           general-purpose register value back into the PSR (using the MSR instruction). For example, a good way to
           switch the ARM to Supervisor mode from another privileged mode is:

               MRS    R0,CPSR                        ;   Read CPSR
               BIC    R0,R0,#0x1F                    ;   Modify by removing current mode
               ORR    R0,R0,#0x13                    ;   and substituting Supervisor mode
               MSR    CPSR_c,R0                      ;   Write the result back to CPSR
.
10305c
           MSR (Move to Status Register from ARM Register) transfers the value of a general-purpose register or an
           immediate constant to the CPSR or the SPSR of the current mode.


           Syntax
           MSR{<cond>}      CPSR_<fields>,   #<immediate>
           MSR{<cond>}      SPSR_<fields>,   #<immediate>

           where:

           <cond>                     Is the condition under which the instruction is executed. The conditions are defined
                                      in The condition field on page A3-3. If <cond> is omitted, the AL (always) condition
                                      is used.

           <fields>                   Is a sequence of one or more of the following:
                                      c           sets the control field mask bit (bit 16)
                                      x           sets the extension field mask bit (bit 17)
                                      s           sets the status field mask bit (bit 18)
                                      f           sets the flags field mask bit (bit 19).

           <immediate>                Is the immediate value to be transferred to the CPSR or SPSR. Allowed immediate
                                      values are 8-bit immediates (in the range 0x00 to 0xFF) and values that can be
                                      obtained by rotating them right by an even amount in the range 0 to 30. These
                                      immediate values are the same as those allowed in the immediate form as shown in
                                      Data-processing operands - Immediate on page A5-6.

           <Rm>                       Is the general-purpose register to be transferred to the CPSR or SPSR.


           Architecture version
           All.



A4-76                    Copyright © 1996-1998, 2000, 2004, 2005 ARM Limited. All rights reserved.          ARM DDI 0100I
                                                                                                  ARM Instructions



         Exceptions
         None.


         Operation
	 /*
         There are four categories of PSR bits, according to rules about updating them, see Types of PSR bits on
         page A2-11 for details.

         The pseudo-code uses four bit mask constants to identify these categories of PSR bits. The values of these
         masks depend on the architecture version, see Table A4-1.

                                                                               Table A4-1 Bit mask constants

           Architecture versions         UnallocMask          UserMask          PrivMask          StateMask

           4                             0x0FFFFF20          0xF0000000         0x0000000F        0x00000000

           4T, 5T                        0x0FFFFF00          0xF0000000         0x0000000F        0x00000020

           5TE, 5TExP                    0x07FFFF00          0xF8000000         0x0000000F        0x00000020

           5TEJ                          0x06FFFF00          0xF8000000         0x0000000F        0x01000020

           6                             0x06F0FC00          0xF80F0200         0x000001DF        0x01000020
	   */

         if ConditionPassed(cond) then
             operand = immed_8 Rotate_Right (rotate_imm * 2)
             if (operand AND UnallocMask) !=0 then
                  UNPREDICTABLE                /* Attempt to set reserved bits */
             byte_mask = (if field_mask[0] == 1 then 0x000000FF else 0x00000000) OR
                            (if field_mask[1] == 1 then 0x0000FF00 else 0x00000000) OR
                            (if field_mask[2] == 1 then 0x00FF0000 else 0x00000000) OR
                            (if field_mask[3] == 1 then 0xFF000000 else 0x00000000)
             if R == 0 then
                  if InAPrivilegedMode() then
                       if (operand AND StateMask) != 0 then
                            UNPREDICTABLE      /* Attempt to set non-ARM execution state */
                       else
                            mask = byte_mask AND (UserMask OR PrivMask)
                  else
                       mask = byte_mask AND UserMask
                  CPSR = (CPSR AND NOT mask) OR (operand AND mask)
             else /* R == 1 */
                  if CurrentModeHasSPSR() then
                       mask = byte_mask AND (UserMask OR PrivMask OR StateMask)
                       SPSR = (SPSR AND NOT mask) OR (operand AND mask)
                  else
                       UNPREDICTABLE


ARM DDI 0100I       Copyright © 1996-1998, 2000, 2004, 2005 ARM Limited. All rights reserved.                  A4-77
ARM Instructions



           Usage
           Use MSR to update the value of the condition code flags, interrupt enables, or the processor mode.
.
10303d
10300,10301c
                  cond       0 0 1 1 0 R 1 0 field_mask                  SBO       rotate_imm          immed_8
.
10298a
A4.1.39 MSRimm
           31            28 27 26 25 24 23 22 21 20 19           16 15         12 11           8   7                     0
.
10191,10192c
             Rd = first_value from Coprocessor[cp_num]
             Rn = second_value from Coprocessor[cp_num]
.
9906c
                 C Flag = unaffected in v5_and_above(), UNPREDICTABLE in v4_and_earlier()
.
9816,9817c
             send Rd to Coprocessor[cp_num]
             send Rn to Coprocessor[cp_num]
.
9729c
             send Rd to Coprocessor[cp_num]
.
9638c
         MemoryAccess(B bit, E bit)
.
9543c
         MemoryAccess(B bit, E bit)
.
9462c
           MemoryAccess(B bit, E bit)
.
9381c
         MemoryAccess(B bit, E bit)
.
9289c
           MemoryAccess(B bit, E bit)
.
9216c
                  R(d+1) = Memory[address+4,4]
.
9212c
             if (Rd is even) and (Rd is not R14) and
.
9209c
         MemoryAccess(B bit, E bit)
.
9125d
9044c
           MemoryAccess(B bit, E bit)
.
8937c
                    if v5_and_above() then
.
8930c
           MemoryAccess(B bit, E bit)
.
8817c
         MemoryAccess(B bit, E bit)
.
8714c
         MemoryAccess(B bit, E bit)
.
8629c
                         PC = value AND 0xFFFFFFFC
.
8625,8626c
                    if v5_and_above() then
                         PC = value AND 0xFFFFFFFE
.
8614c
         MemoryAccess(B bit, E bit)
.
8503c
         MemoryAccess(B bit, E bit)
.
8479c
                            determines the P, U, Rn, W and offset_8 bits of the instruction.
.
8444c
                cond       1 1 0 P U N W 1                 Rn           CRd         cp_num           offset_8
.
8071c
              Rd = 31 - (bit_position_of_most_significant_1(Rm))
.
8067a
	 if ConditionPassed(cond) then
.
8008c
               Coprocessor[cp_num] dependent_operation
.
7928c
                            IF JE_bit_of_Main_Configuration_register() == 0
.
7906,7909c
                             Start_opcode_execution_at(jpc)
                    else
                        if CV_bit_of_Jazelle_OS_Control_register() == 0 and
                                         IMPLEMENTATION_DEFINED_CONDITION() then
.
7899,7902c
                    jpc = jpc_SUB_ARCHITECTURE_DEFINED_value()
                    invalidhandler = invalidhandler_SUB_ARCHITECTURE_DEFINED_value()
                    if Jazelle_Extension_accepts_opcode_at(jpc) then
                        if CV_bit_of_Jazelle_OS_Control_register() == 0 then
.
7895c
               if JE_bit_of_Main_Configuration_register() == 0 then
.
7780c
               LR = address_of_next_instruction()
.
7742c
           31      28 27 26 25 24 23 22 21 20 19               16 15         12 11          8   7 6 5 4 3               0
.
7690c
           PC = PC + (SignExtend_30(signed_immed_24) << 2) + (H << 1)
.
7688c
           LR = address_of_next_instruction()
.
7596c
               if high_vectors_configured() then
.
7587,7588c
           if not_overridden_by_debug_hardware()
               R14_abt   = address_of_current_instruction() + 4
.
7556c
           31 30 29 28 27 26 25 24 23 22 21 20 19                                       8   7 6 5 4 3           0
.
7428c
                 LR = address_of_next_instruction()
.
7201c
                  cond       0 0 I 0 1 0 0 S                  Rn            Rd                    shifter_operand
.
4972,4973c
          -1 × –1 == +1). If it were doubled without saturation, it would instead produce 0x80000000, which is the
          Q31 representation of -1.
.
4968c
          Q31 form, it must be doubled, so that the required scaling factor becomes 2-31. Furthermore, it is possible
.
4963c
          factor of 2-15 × 2–15 == 2–30. For example, multiplying the Q15 number 0x8000 (representing –1) by itself
.
4961c
          numbers from -1 to +1 – 2–15 and is known as a Q15 number.
.
4949c
          of 2-31.
.
4944c
          to dividing its signed integer value by 231, so that it can now represent numbers from -1 to +1 – 2–31. When
.
4929,4930c
          •      If the correct mathematical result is less than -231 and so overflows the lower end of the representable
                 range, the result of the operation is equal to -231.
.
4926,4927c
          •      If the correct mathematical result is greater than +231 - 1 and so overflows the upper end of the
                 representable range, the result of the operation is equal to +231 - 1.
.
4923c
          •      If the correct mathematical result lies within the available range from -231 to +231 – 1, the result of
.
4915c
          0xC0000000. This represents -230, which is smaller than the correct mathematical result by 232, and does
.
4906,4907c
          When viewed as a signed number, the value of a general-purpose register lies in the range from -231 (or
          0x80000000) to +231 - 1 (or 0x7FFFFFFF). If an addition or subtraction is performed on such numbers
.
4645c
                          Jazelle state execution - instead, BXJ behaves exactly as a BX instruction. See BXJ on
.
4489c
                to the instruction at (R14_und - 4).
.
4486c
                (R14_und - 4), followed by returning to the instruction that follows it. Imprecise Undefined
.
4484c
                with the instruction at (R14_und - 4)).
.
4482c
                can typically be either precise (that is, caused by the instruction at (R14_und - 4)) or imprecise (that
.
4446c
              ELSE map the page following the page including (R14_abt - 4)
.
4444c
          IF the page pointed to by (R14_abt - 4) is not mapped
.
4430c
         processor’s prefetch abort handler, (R14_abt - 4) must point to the first byte of the opcode concerned.
.
4425c
         its execution was attempted. It is always at address (R14_abt - 4).
.
2821c
         CPS - Change Processor State
.
2807c
          RFE - Return From Exception
.
2794c
          SRS - Store Return State
.
2783c
          •     FIQ mode is designed for efficient use by a single owner, using R8_fiq - R13_fiq as global variables.
.
2759c
         word to be accessed twice - once before the abort, and a second time after the abort handler has returned.
.
2620,2621c
         if CP15_reg1_VEbit==0 then
           if high_vectors_configured() then
.
2612c
         R14_fiq   = address_of_next_instruction() + 4
.
2575,2576c
          if CP15_reg1_VEbit==0 then
            if high_vectors_configured() then
.
2564c
                      address_of_next_instruction() + 4
.
2415c
         R14_abt     = address_of_current_instruction() + 8
.
2381c
          R14_abt     = address_of_current_instruction() + 4
.
2359c
          if high_vectors_configured() then
.
2348c
                      address_of_next_instruction()
.
2316c
         if high_vectors_configured() then
.
2305c
                     address_of_next_instruction()
.
2271c
          if high_vectors_configured() then
.
w
